// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMVictorSPX leftFollow;
private PWMVictorSPX rightFollow;
private PWMSparkMax left;
private PWMSparkMax right;
private DifferentialDrive differentialDrive1;
private Encoder quadratureEncoderLeft;
private Encoder quadratureEncoderRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFollow = new PWMVictorSPX(3);
 addChild("Left Follow",leftFollow);
 left.addFollower(leftFollow);
leftFollow.setInverted(false);

rightFollow = new PWMVictorSPX(4);
 addChild("Right Follow",rightFollow);
 right.addFollower(rightFollow);
rightFollow.setInverted(false);

left = new PWMSparkMax(1);
 addChild("Left",left);
 left.setInverted(false);

right = new PWMSparkMax(2);
 addChild("Right",right);
 right.setInverted(true);

differentialDrive1 = new DifferentialDrive(left, right);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);


quadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
 addChild("Quadrature Encoder Left",quadratureEncoderLeft);
 quadratureEncoderLeft.setDistancePerPulse(1.0);

quadratureEncoderRight = new Encoder(2, 3, true, EncodingType.k4X);
 addChild("Quadrature Encoder Right",quadratureEncoderRight);
 quadratureEncoderRight.setDistancePerPulse(1.0);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

